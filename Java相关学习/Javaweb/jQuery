#  jQuery

## 1.jQuery的基本介绍

辅助JavaScript开发的js类库

## 2.jQuery的注意事项

1. 使用jQuery一定要引入jQuery库

2. jQuery中的$是一个函数

3. 如何为按钮添加点击响应函数的？ 

    1、使用 jQuery 查询到标签对象 

    2、使用标签对象.click( function(){} );

## 3.jQuery核心函数 $

**$ 是 jQuery 的核心函数**，能完成 jQuery 的很多功能。$()就是调用$这个函数

1、传入参数为 [ 函数 ] 时： 

+ 表示页面加载完成之后。相当于 window.onload = function(){} 

2、传入参数为 [ HTML 字符串 ] 时： 

+ 会为我们创建这个 html 标签对象 

3、传入参数为 [ 选择器字符串 ] 时：

+  $(“#id 属性值”); id 选择器，根据 id 查询标签对象
+ $(“标签名”); 标签名选择器，根据指定的标签名查询标签对象
+ $(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象

4、传入参数为 [ DOM 对象 ] 时： 

+ 会把这个 dom 对象转换为 jQuery 对象

## 4.jQuery 对象和 dom 对象区分 

### 4.1 什么是 jQuery 对象，什么是 dom 对象 

**Dom 对象 **

1. 通过 getElementById()查询出来的标签对象是 Dom 对象 
2. 通过 getElementsByName()查询出来的标签对象是 Dom 对象 
3. 通过 getElementsByTagName()查询出来的标签对象是 Dom 对象 
4. 通过 createElement() 方法创建的对象，是 Dom 对象

**DOM 对象 Alert 出来的效果是：[object HTML 标签名 Element]**

**jQuery 对象 **

1. 通过 JQuery 提供的 API 创建的对象，是 JQuery 对象 
2. 通过 JQuery 包装的 Dom 对象，也是 JQuery 对象 
3. 通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象 

**jQuery 对象 Alert 出来的效果是：[object Object]**



###4.2 问题：jQuery 对象的本质是什么？

jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数



### 4.3 jQuery 对象和 Dom 对象使用区别 

jQuery 对象不能使用 DOM 对象的属性和方法 DOM 对象也不能使用 jQuery 对象的属性和方法



### 4.4 Dom 对象和 jQuery 对象互转

1. **dom 对象转化为 jQuery 对象（*重点） **
   1. 先有 DOM 对象 
   2. $( DOM 对象 ) 就可以转换成为 jQuery 对象 2、 
2. **jQuery 对象转为 dom 对象（*重点）**
   1. 先有 jQuery 对象 
   
   2. jQuery 对象[下标]取出相应的 DOM 对象
   
   3. ```
      $(function(){
         var $btns=$("button");
         for (var i = 0; i < $btns.length; i++) {
            alert($btns[i]);
         }
      
      });
      ```

## 5 jQuery 选择器（*****重点）

### 5.1 基本选择器（重点）

\#ID 选择器：根据 id 查找标签对象 

+ eg：`$(#id_name)`
+ css()方法：访问或设置匹配元素的样式属性。

.class 选择器：根据 class 查找标签对象 

+ `$(.class_name)`

element 选择器：根据标签名查找标签对象 

+ `$(element)`

\* 选择器：表示任意的，所有的元素 selector1，selector2 

+ `$(*)`

组合选择器：合并选择器 1，选择器 2 的结果并返回

+ ```
  $("div,span,p.myClass")
  ```

+ eg:`p.myClass`:表示标签名必须是p标签，而且class类型还要是myClass

### 5.2 层级选择器（重点）

ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素

 parent > child 子元素选择器：在给定的父元素下匹配所有的子元素 

prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 

prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素

示例代码：

` $(document).ready(function(){}`的简写是`$(function(){});`

```javascript
<script type="text/javascript">
   $(document).ready(function(){
      //1.选择 body 内的所有 div 元素 
      $("#btn1").click(function(){
         $("body  div").css("background", "#bbffaa");
      });

      //2.在 body 内, 选择div子元素  
      $("#btn2").click(function(){
         $("body> div").css("background", "#bbffaa");
      });

      //3.选择 id 为 one 的下一个 div 元素 
      $("#btn3").click(function(){
         $("#one + div").css("background", "#bbffaa");
      });

      //4.选择 id 为 two 的元素后面的所有 div 兄弟元素
      $("#btn4").click(function(){
         $("#two ~ div").css("background", "#bbffaa");
      });
   });
</script>
```



### 5.3 过滤选择器 

**基本过滤器： **

+ **:first **获取第一个元素
+ **:last** 获取最后个元素
+ **:eq(index)** 匹配一个给定索引值的元素
+ :not(selector) 去除所有与给定选择器匹配的元素
+ :even 匹配所有索引值为偶数的元素，从 0 开始计数 
+ :odd 匹配所有索引值为奇数的元素，从 0 开始计数 
+ :eq(index) 匹配一个给定索引值的元素 
+ :gt(index) 匹配所有大于给定索引值的元素 
+ :lt(index) 匹配所有小于给定索引值的元素
+  :header 匹配如 h1, h2, h3 之类的标题元素
+  :animated 匹配所有正在执行动画效果的元素

上诉过滤器可组合使用：eg：`$("div:not(:animated)")`

```
$("#btn4").click(function(){
   $("div:even").css("background", "#bbffaa");
});
```

**内容过滤器：**

+ :contains(text) 匹配包含给定文本的元素 
+ :empty 匹配所有不包含子元素或者文本的空元素
+ :parent 匹配含有子元素或者文本的元素
+  :has(selector) 匹配含有选择器所匹配的元素的元素

示例代码：

```javascript
$(document).ready(function(){
   //1.选择 含有文本 'di' 的 div 元素
   $("#btn1").click(function(){
      $("div:contains(di)").css("background", "#bbffaa");
   });

   //2.选择不包含子元素(或者文本元素) 的 div 空元素
   $("#btn2").click(function(){
      $("div:empty").css("background", "#bbffaa");
   });

   //3.选择含有 class 为 mini 元素的 div 元素
   $("#btn3").click(function(){
      $("div:has(.mini)").css("background", "#bbffaa");
   });

   //4.选择含有子元素(或者文本元素)的div元素
   $("#btn4").click(function(){
      $("div:parent").css("background", "#bbffaa");
   });
});
```

**属性过滤器：** 

+  [attribute] 匹配包含给定属性的元素。
+  [attribute=value] 匹配给定的属性是某个特定值的元素
+  [attribute!=value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。
+  [attribute^=value] 匹配给定的属性是以某些值开始的元素
+  [attribute$=value] 匹配给定的属性是以某些值结尾的元素
+ [attribute*=value] 匹配给定的属性是以包含某些值的元素 
+ \[attrSel1]\[attrSel2][attrSelN] 复合属性选择器，需要同时满足多个条件时使用。

示例代码：

```javascript
$(function() {
   //1.选取含有 属性title 的div元素
   $("#btn1").click(function() {
      $("div[title]").css("background", "#bbffaa");
   });
   //2.选取 属性title值等于'test'的div元素
   $("#btn2").click(function() {
      $("div[title='test']").css("background", "#bbffaa");
   });
   //3.选取 属性title值不等于'test'的div元素(*没有属性title的也将被选中)
   $("#btn3").click(function() {
      $("div[title != 'test']").css("background", "#bbffaa");
   });
   //4.选取 属性title值 以'te'开始 的div元素
   $("#btn4").click(function() {
      $("div[title^='te']").css("background", "#bbffaa");
   });
   //5.选取 属性title值 以'est'结束 的div元素
   $("#btn5").click(function() {
      $("div[title$='est']").css("background", "#bbffaa");
   });
   //6.选取 属性title值 含有'es'的div元素
   $("#btn6").click(function() {
      $("div[title*='es']").css("background", "#bbffaa");
   });
   
   //7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有'es'的 div 元素
   $("#btn7").click(function() {
      $("div[id][title*='es']").css("background", "#bbffaa");
   });
   //8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素
   $("#btn8").click(function() {
      $("div[title][title !='test']").css("background", "#bbffaa");
   });
});
```

**表单过滤器:** 

+ :input 匹配所有 input, textarea, select 和 button 元素
+ :text 匹配所有 文本输入框
+  :password 匹配所有的密码输入框 
+ :radio 匹配所有的单选框 
+ :checkbox 匹配所有的复选框 
+ :submit 匹配所有提交按钮
+  :image 匹配所有 img 标签 
+ :reset 匹配所有重置按钮 
+ :button 匹配所有 input type=button 按钮
+ :file 匹配所有 input type=file 文件上传
+ :hidden 匹配所有不可见元素 display
+ :none 或 input type=hidden

**表单对象属性过滤器：** 

+ :enabled 匹配所有可用元素 
+ :disabled 匹配所有不可用元素
+ :checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象 
+ :selected 匹配所有选中的 option

示例代码：

```javascript
$("#btn1").click(function(){
      $(":text:enabled").val("New Value");
   });
   //2.对表单内 不可用input 赋值操作
   $("#btn2").click(function(){
      $(":text:disabled").val("New Value Too");
   });
   //3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数
   $("#btn3").click(function(){
      alert($(":checkbox").size())
   });
   //4.获取多选框，每个选中的value值
   $("#btn4").click(function(){
      //方法1
      var $btnObj=$(":checkbox:checked");
      // for (var i = 0; i <$btnObj.length ; i++) {
      //     alert($btnObj[i].value);
      // }
      //方法2
      $btnObj.each(function () {
         alert(this.value);
      })
   });
   //5.获取下拉框选中的内容  
   $("#btn5").click(function(){
      var $btnObj2=$("select option:selected")
      $btnObj2.each(function () {
         alert(this.value);
      })
   });
}) 
```

##6.jQuery 元素筛选

+ eq() 获取给定索引的元素 功能跟 :eq() 一样 
+ first() 获取第一个元素 功能跟 :first 一样 l
+ ast() 获取最后一个元素 功能跟 :last 一样 
+ filter(exp) 留下匹配的元素 
+ is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true 
+ has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样 
+ not(exp) 删除匹配选择器的元素 功能跟 :not 一样 
+ children(exp) 返回匹配给定选择器的子元素 功能跟 parent>child 一样 
+ find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样 
+ next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样 
+ nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样 
+ nextUntil() 返回当前元素到指定匹配的元素为止的后面元素 
+ parent() 返回父元素 prev(exp) 返回当前元素的上一个兄弟元素 
+ prevAll() 返回当前元素前面所有的兄弟元素 
+ prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素 
+ siblings(exp) 返回所有兄弟元素 
+ add() 把 add 匹配的选择器的元素添加到当前 jquery 对象中



javaWeb-day2-07.21 任务04-05完成

 ## 7.jQuery的属性操作

**往下面属性括号内传递参数是设置i，不传递参数是获取**

+ html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。 

  `$("div").html("<h1>我是div中的标题 1</h1>");`

+ text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。 

  ```java
  $("div").text("<h1>我想是什么样就是什么样</h1>");//<h1>标签只会成为普通文本。
  $("div").text("我想是什么样就是什么样");
  ```

+ val() 它可以设置和获取**表单项**的 value 属性值。 跟 dom 属性 value 一样

  ```javascript
  $("button").click(function () {
          //alert( $("#username").val());
          $("#username").val("超级程序员");
      })
  });
  ```

+ attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等 

  + attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj 

+ prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等

## 8.DOM的增删改

内部插入： 

+ appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素

+ prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素  

外部插入：

+ insertAfter() a.insertAfter(b) 得到 ba 

+ insertBefore() a.insertBefore(b) 得到 ab 

 替换: 
+ replaceWith() a.replaceWith(b) 用 b 替换掉 a 
+ replaceAll() a.replaceAll(b) 用 a 替换掉所有 b 

 删除： 
+ remove() a.remove(); 删除 a 标签 
+ empty() a.empty(); 清空 a 标签里的内容

## 9. jQuery动画

**基本动画 **

show() 			将隐藏的元素显示 

hide()     		  将可见的元素隐藏。 

toggle() 		    可见就隐藏，不可见就显示。 

以上动画方法都可以添加参数。

​	1、第一个参数是动画 执行的时长，以毫秒为单位 

​	2、第二个参数是动画的回调函数 (动画完成后自动调用的函数) 

**淡入淡出动画 **

fadeIn() 			淡入（慢慢可见） 

adeOut() 		  淡出（慢慢消失） 

fadeTo()            在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明 

fadeToggle()      淡入/淡出 切

## 10.CSS 样式操作

addClass() 		添加样式 

removeClass()  删除样式 

toggleClass() 	有就删除，没有就添加样式。 

offset() 			  获取和设置元素的坐标。





## 11.jQuery事件操作 

面试题

**$( function(){} ); 和 window.onload = function(){} 的区别？ **

**他们分别是在什么时候触发？ **

1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。 

2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载 完成

**他们触发的顺序？**

 1、jQuery 页面加载完成之后先执行

 2、原生 js 的页面加载完成之后 

**他们执行的次数？ **

1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。 

2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行



**jQuery 中其他的事件处理方法：**

click() 					它可以绑定单击事件，以及触发单击事件 

+ ​	传函数的时候是绑定，不传函数的时候是触发

mouseover() 		鼠标移入事件 

mouseout() 			鼠标移出事件 

bind() 					可以给元素一次性绑定一个或多个事件。多个事件之间用空格隔开。

one() 					使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。 

unbind() 				跟 bind 方法相反的操作，解除事件的绑定 

live() 					也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后								面动态创建出 来的也有效

**事件的冒泡**

**什么是事件的冒泡？**

 事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去 响应。 

**那么如何阻止事件冒泡呢？ **

在子元素事件函数体内，**return false**; 可以阻止事件的冒泡传递。

 

javaScript 事件对象

 事件对象，是封装有触发的事件信息的一个 javascript 对象。 我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。 

如何获取呢 javascript 事件对象呢？ 

在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，我们习惯取名为 event。 这个 event 就是 javascript 传递参事件处理函数的事件对象。 

比如

1.原生 javascript 获取 事件对象 

```javascript
window.onload = function () {
	document.getElementById("areaDiv").onclick = function (event) {
		console.log(event);
	}
}
```

2.jQuery 代码获取 事件对象

```javascript
$(function () {
	$("#areaDiv").click(function (event) {
		console.log(event);
	});
});
```

3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。 

```javascript
$("#areaDiv").bind("mouseover mouseout",function (event) {
	if (event.type == "mouseover") {
		console.log("鼠标移入");
	} else if (event.type == "mouseout") {
		console.log("鼠标移出");
	}
});
```

